# --------------------------------------------------------------------------------
# Build info
# --------------------------------------------------------------------------------
info.build.ciBuildNo=@env.BUILD_NUMBER@
info.build.ciBuildTag=@env.BUILD_TAG@
info.build.ciBuildUrl=@env.BUILD_URL@
info.build.ciJobName=@env.JOB_NAME@
info.build.ciGitSHA1=@env.BUILD_GIT_SHA1@

spring.application.name=metasfresh-webui-api
spring.application.title=metasfresh WebUI API service

#
# Logging
#

# logstash; see https://github.com/metasfresh/metasfresh/issues/1504
# This application sends log events to logstash, if enabled via this property. 
# Not enabled by default, because it needs some infrastruction (i.e. an ELK stack) to work. If that infrastructure is in place, use it to enable this feature via command line param or centralized config.
# If you are a dev and need a local ELK stack to benefit from logstash, take a look at https://github.com/metasfresh/metasfresh-dev/tree/master/vagrant
# Note that the application won't hang or crash if logstash is not avaiable or too slow.
logstash.enabled=false
logstash.host=localhost
logstash.port=5000

logging.level.springfox = WARN
logging.level.de.metas.ui.web.session.WebRestApiContextProvider = DEBUG
#logging.level.de.metas.ui.web.session.UserSession = TRACE
logging.level.de.metas.ui.web.window = INFO
logging.level.de.metas.ui.web.window.WindowConstants.logger = INFO
logging.level.de.metas.ui.web.window.controller.Execution = DEBUG
#
# Callouts
logging.level.org.adempiere.ad.callout.api.impl.CalloutExecutor = INFO
#
# Notifications & EventBus
logging.level.de.metas.ui.web.websocket = DEBUG
logging.level.de.metas.ui.web.notification = TRACE
logging.level.de.metas.event = TRACE
#
# Processes
logging.level.de.metas.ui.web.process.ProcessInstance = DEBUG

#
# User session 
#
# Session timeout in seconds
# See https://github.com/metasfresh/metasfresh-webui-api/issues/770
server.session.timeout=7200

#
# Error handling
#
# see org.springframework.boot.autoconfigure.web.ErrorProperties.IncludeStacktrace
server.error.include-stacktrace=always

#
# HTTP
#
spring.http.multipart.max-file-size=100Mb
spring.http.multipart.max-request-size=100Mb

#
# Debugging
#
metasfresh.webui.debug.showColumnNamesForCaption=false

#
# metasfreh-admin
#
# only try registering once a minute, because metasfresh-admin might not be running anyways
spring.boot.admin.period=60000
# don't log a warning if registration fails, in order not to pollute the log output in case metasfresh-admin is not running
logging.level.de.codecentric.boot.admin.services.ApplicationRegistrator=ERROR


# --------------------------------------------------------------------------------
# Elasticsearch
# for more properties, see https://github.com/spring-projects/spring-boot/blob/v1.4.1.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchProperties.java
# --------------------------------------------------------------------------------
# Elasticsearch cluster name.
spring.data.elasticsearch.cluster-name=metasfresh
spring.data.elasticsearch.cluster-nodes=localhost:9301
#spring.data.elasticsearch.repositories.enabled=true
# NOTE: Avoid spamming the console in case there is no connection to elasticsearch. Those "Connection refused" are logged as INFO
logging.level.org.elasticsearch.client.transport=WARN


#
# misc
#
# Issue https://github.com/metasfresh/metasfresh/issues/1578
# Specify an activemq broker URL. 
# Without this, the spring-boot health actuator endpoint tries to start its own broker using the URL vm://localhost.
# That results in the error, probably because the vm://localhost local broker can't start up cleanly..maybe because it wants to expose its JMX stuff via port 1099 which is already taken.
# Anyways, the metasfresh stack needs a JMS broker to be running, so we can as well tell spring boot to use that broker and not attempt to create a local one.
# Note: this property often needs to be overridden with a URL pointing to the *external* IP (or hostname) of the server running the JMS-broker.
spring.activemq.broker-url=tcp://127.0.0.1:61616
